// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/**
 * In a Prisma schema, @db.ObjectId is a MongoDB-specific field attribute that tells Prisma this field should be stored in the database as a MongoDB ObjectId type, not as a plain string or number.
 */

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Array of conversation ids that the user is a part of
  conversationIds String[] @db.ObjectId

  // Array of conversation objects that the user is a part of
  // This is a @relation field, which allows us to define a relationship between the User model and the Conversation model
  // The fields: [conversationsIds] syntax says that the values in the conversationsIds field on this User model should be used to find the corresponding Conversation objects
  // The references: [id] syntax says that the id field on the Conversation model should be used to match with the values in the conversationsIds field on this User model
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // This unique constraint ensures that there is only one account per user per provider (e.g. one Google account per user)
  // This is useful for preventing users from adding the same account multiple times
  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIdx String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  body      String?
  image     String?

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId

  // This sender field on the current model (e.g. Message) is a relation to the User model, using senderId as the foreign key, and referencing the id field in the User model. If the referenced user is deleted, delete this message too.
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
